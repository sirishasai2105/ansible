# - name: create ec2 through ansible
#   hosts: local
#   connection: local
#   vars:
#     sg_id: "sg-001753742e64eaea2"
#     subnet_id: "subnet-01d01e08a40b72067"
#     ami_id: "ami-09c813fb71547fc4f"
#     zone: "reyanshsai.online"
#     region: us-east-1
#     instances:
#     - mysql
#     - backend
#     - frontend
      
#   tasks:
#   - name: creating  ec2 instance
#     amazon.aws.ec2_instance:
#       name: "{{ item }}"
#       image_id: "{{ ami_id }}"
#       security_group: "{{ sg_id }}"
#       vpc_subnet_id: "{{ subnet_id }}"
#       instance_type: "t3.micro"
#       region: "{{ region }}"
#     loop: "{{ instances }}"
#     register: ec2_instances

#   - name: getting the ec2-instances information after creating
#     ansible.builtin.debug:
#       msg: "{{ ec2_instances }}"

#   - name: create r53 private records
#     amazon.aws.route53:
#       state: present
#       zone: "{{ zone }}"
#       record: "{{ item.item }}.{{ zone }}" #mysql.daws81s.online
#       type: A
#       ttl: 1
#       value: "{{ item.instances[0].private_ip_address }}"
#       wait: true
#       overwrite: true
#     loop: "{{ ec2_instances.results }}"

#   - name: creating r53 domain
#     amazon.aws.route53:
#       state: present
#       zone: "{{ zone }}"
#       record: "{{ zone }}"
#       type: A
#       ttl: 1
#       value: "{{ item.instances[0].public_ip_address }}"
#       wait: true
#       overwrite: true
#     loop: "{{ ec2_instances.results }}"
#     when: item.item == "frontend"

- name: create ec2 and r53 records
  hosts: local
  connection: local
  # assignment
  # move this to vars_files
  vars:
    subnet_id:  "subnet-01d01e08a40b72067" # replace with your subnet id
    sg_id: "sg-001753742e64eaea2"
    ami_id: "ami-09c813fb71547fc4f"
    instances:
    - mysql
    - backend
    - frontend
    zone: reyanshsai.online
  tasks:
  - name: ansible to install boto3 and botocore
    ansible.builtin.pip:
      name:
      - boto3
      - botocore
      executable: pip3.9
  - name: create ec2 instance
    amazon.aws.ec2_instance:
      name: "{{ item }}"
      vpc_subnet_id: "{{ subnet_id }}"
      instance_type: "t3.micro"
      security_group: "{{ sg_id }}"
      image_id: "{{ ami_id }}"
    loop: "{{ instances }}"
    register: ec2_instances

  - name: print the output
    ansible.builtin.debug:
      msg: "{{ ec2_instances }}"

  #private IP R53
  - name: create r53 private records
    amazon.aws.route53:
      state: present
      zone: "{{ zone }}"
      record: "{{ item.item }}.{{ zone }}" #mysql.daws81s.online
      type: A
      ttl: 1
      value: "{{ item.instances[0].private_ip_address }}"
      wait: true
      overwrite: true
    loop: "{{ ec2_instances.results }}"

  - name: create r53 public record for frontend
    amazon.aws.route53:
      state: present
      zone: "{{ zone }}"
      record: "{{ zone }}" #daws81s.online
      type: A
      ttl: 1
      value: "{{ item.instances[0].public_ip_address }}"
      wait: true
      overwrite: true
    loop: "{{ ec2_instances.results }}"
    when: item.item == "frontend"


